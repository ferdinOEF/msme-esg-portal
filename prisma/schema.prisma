generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "sqlite" if you truly use sqlite locally
  url      = env("DATABASE_URL")
}

model Scheme {
  id           String   @id @default(cuid())
  name         String
  shortCode    String?
  type         String      // e.g., "Certification" | "Scheme" | "Framework" (keep as string for now)
  authority    String?     // issuing authority
  tags         String      // comma-separated tags
  description  String?
  benefits     String?
  eligibility  String?
  documentsUrl String?
  pillar       String?     // <-- added so app stops breaking when reading .pillar
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  linksFrom Link[]  @relation("LinksFrom")
  linksTo   Link[]  @relation("LinksTo")
  files     File[]  // <-- uploaded files tied to scheme
}

model LegalDoc {
  id          String   @id @default(cuid())
  title       String
  jurisdiction String
  sector      String?
  locationTag String?
  summary     String?
  url         String?
  tags        String     // required
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Template {
  id          String   @id @default(cuid())
  title       String
  category    String
  contentMd   String
  tags        String     // required
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Link {
  id        String  @id @default(cuid())
  fromId    String
  toId      String
  relation  String

  from Scheme @relation(fields: [fromId], references: [id], name: "LinksFrom")
  to   Scheme @relation(fields: [toId], references: [id], name: "LinksTo")
}

model File {
  id          String   @id @default(cuid())
  schemeId    String?
  filename    String
  mimeType    String?
  sizeBytes   Int?
  url         String     // where it lives (Vercel Blob / S3 / GDrive link, etc.)
  kind        String?    // e.g., "circular", "faq", "supporting"
  status      String?    // e.g., "Uploaded","Pending","Verified"
  uploadedBy  String?    // future: user id / email
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  scheme      Scheme?   @relation(fields: [schemeId], references: [id])
}
