generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(CONSULTANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userSchemes     UserScheme[]
  esgPlans        ESGPlan[]
  auditRecords    AuditRecord[]
  uploadedFiles   File[]       @relation("UploadedBy")
}

model Scheme {
  id           String      @id @default(cuid())
  name         String      @unique
  shortCode    String?
  type         SchemeType
  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   String?
  authority    String?
  jurisdiction Jurisdiction @default(CENTRAL)
  pillar       String?     // E,S,G comma-separated
  tags         String      // comma-separated tags
  description  String?
  benefits     String?
  eligibility  String?
  documentsUrl String?
  isActive     Boolean     @default(true)
  priority     Priority    @default(MEDIUM)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  linksFrom    Link[]       @relation("LinksFrom")
  linksTo      Link[]       @relation("LinksTo")
  files        File[]
  userSchemes  UserScheme[]
  esgPlanItems ESGPlanItem[]

  @@index([type, jurisdiction])
  @@index([isActive])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?  // hex color for UI
  icon        String?  // icon name or emoji
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  schemes     Scheme[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserScheme {
  id         String           @id @default(cuid())
  userId     String
  schemeId   String
  status     ApplicationStatus @default(INTERESTED)
  isFavorite Boolean          @default(false)
  notes      String?
  appliedAt  DateTime?
  completedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheme Scheme @relation(fields: [schemeId], references: [id], onDelete: Cascade)

  @@unique([userId, schemeId])
}

model LegalDoc {
  id          String       @id @default(cuid())
  title       String       @unique
  jurisdiction Jurisdiction
  sector      String?
  locationTag String?
  summary     String?
  url         String?
  tags        String       // comma-separated
  isActive    Boolean      @default(true)
  priority    Priority     @default(MEDIUM)
  effectiveDate DateTime?
  expiryDate    DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([jurisdiction, isActive])
  @@index([effectiveDate, expiryDate])
}

model Template {
  id          String       @id @default(cuid())
  title       String       @unique
  category    TemplateCategory
  contentMd   String
  tags        String       // comma-separated
  downloadUrl String?
  version     String       @default("1.0")
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([category, isActive])
}

model File {
  id          String     @id @default(cuid())
  schemeId    String?
  name        String
  originalName String?
  url         String?
  storageKey  String?    // for cloud storage
  type        FileType   @default(OTHER)
  status      FileStatus @default(PENDING)
  mimeType    String?
  sizeBytes   Int?
  uploadedById String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  scheme     Scheme? @relation(fields: [schemeId], references: [id], onDelete: Cascade)
  uploadedBy User?   @relation("UploadedBy", fields: [uploadedById], references: [id])

  @@index([schemeId, status])
  @@index([type, status])
}

model Link {
  id       String @id @default(cuid())
  fromId   String
  toId     String
  relation LinkRelation

  from Scheme @relation(fields: [fromId], references: [id], name: "LinksFrom", onDelete: Cascade)
  to   Scheme @relation(fields: [toId], references: [id], name: "LinksTo", onDelete: Cascade)

  @@unique([fromId, toId, relation])
}

model ESGPlan {
  id          String      @id @default(cuid())
  name        String
  description String?
  userId      String
  companyName String
  sector      String
  size        CompanySize
  state       String
  udyamNumber String?
  turnoverCr  Float?
  status      PlanStatus  @default(DRAFT)
  targetDate  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ESGPlanItem[]

  @@index([userId, status])
}

model ESGPlanItem {
  id          String         @id @default(cuid())
  planId      String
  schemeId    String?
  title       String
  description String?
  pillar      ESGPillar
  priority    Priority       @default(MEDIUM)
  status      ItemStatus     @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  notes       String?
  order       Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  plan   ESGPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  scheme Scheme? @relation(fields: [schemeId], references: [id])

  @@index([planId, status])
  @@index([pillar, priority])
}

model AuditRecord {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  auditType   AuditType
  findings    String?    // JSON or text
  score       Float?
  maxScore    Float?
  status      AuditStatus @default(DRAFT)
  auditDate   DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, auditType])
  @@index([auditDate])
}

// Enums
enum Role {
  ADMIN
  CONSULTANT
  CLIENT
}

enum SchemeType {
  SCHEME
  CERTIFICATION
  FRAMEWORK
  SUBSIDY
  INCENTIVE
}

enum Jurisdiction {
  CENTRAL
  STATE
  INTERNATIONAL
  CPCB
  NGT
  SECTOR_SPECIFIC
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ApplicationStatus {
  INTERESTED
  APPLIED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ON_HOLD
}

enum FileType {
  CIRCULAR
  FAQ
  GUIDELINE
  FORM
  SUPPORTING
  AUDIT_REPORT
  CERTIFICATE
  OTHER
}

enum FileStatus {
  UPLOADED
  PENDING
  PROCESSING
  APPROVED
  REJECTED
}

enum LinkRelation {
  SUPPORTS
  REQUIRES
  UNLOCKS
  CONFLICTS_WITH
  SIMILAR_TO
}

enum TemplateCategory {
  CHECKLIST
  AUDIT
  POLICY
  REPORT
  FORM
  GUIDELINE
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum PlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ESGPillar {
  ENVIRONMENTAL
  SOCIAL
  GOVERNANCE
  QUALITY
}

enum ItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum AuditType {
  ENVIRONMENTAL
  SOCIAL
  GOVERNANCE
  COMPLIANCE
  INTEGRATED
}

enum AuditStatus {
  DRAFT
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  REVIEWED
}