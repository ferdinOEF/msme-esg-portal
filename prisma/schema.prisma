// prisma/schema.prisma
// SQLite/Postgres compatible. Adjust provider/url as needed.
datasource db {
  provider = env("DATABASE_PROVIDER") // e.g. "postgresql" or "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Scheme {
  id           String   @id @default(cuid())
  name         String   @unique
  shortCode    String?
  /// "Scheme" | "Certification" | "Framework" | "Subsidy" (keep as free text for now)
  type         String
  authority    String?   // e.g. MSME, SIDBI, State Dept, BIS, ISO
  pillar       String?   // optional; was missing in DBâ€”kept for forward-compat
  tags         String    @default("") // CSV tags like "central,scheme,quality"
  description  String?
  benefits     String?
  eligibility  String?
  documentsUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  files     File[]
  linksFrom Link[]  @relation("LinksFrom")
  linksTo   Link[]  @relation("LinksTo")
}

model Template {
  id          String   @id @default(cuid())
  title       String   @unique
  category    String   // "Checklist" | "Audit" | "Policy" | ...
  contentMd   String
  tags        String   @default("") // <- add tags to avoid seed error
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LegalDoc {
  id          String   @id @default(cuid())
  title       String   @unique
  jurisdiction String  // "Central", "State", etc.
  sector      String?
  locationTag String?
  summary     String?
  url         String?
  tags        String   @default("") // required logically; default to empty
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id        String   @id @default(cuid())
  schemeId  String?
  title     String?
  url       String
  status    FileStatus @default(UPLOADED)
  createdAt DateTime @default(now())

  scheme    Scheme?  @relation(fields: [schemeId], references: [id], onDelete: Cascade)
}

enum FileStatus {
  UPLOADED
  PENDING
}

model Link {
  id           String  @id @default(cuid())
  fromSchemeId String?
  toSchemeId   String?
  label        String?

  from Scheme? @relation("LinksFrom", fields: [fromSchemeId], references: [id], onDelete: Cascade)
  to   Scheme? @relation("LinksTo",   fields: [toSchemeId],   references: [id], onDelete: Cascade)
}
