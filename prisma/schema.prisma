generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "sqlite" if you truly use sqlite locally
  url      = env("DATABASE_URL")
}

model Scheme {
  id           String   @id @default(cuid())
  name         String
  shortCode    String?
  type         String      // e.g., "Certification" | "Scheme" | "Framework" (keep as string for now)
  authority    String?     // issuing authority
  tags         String      // comma-separated tags
  description  String?
  benefits     String?
  eligibility  String?
  documentsUrl String?
  pillar       String?     // <-- added so app stops breaking when reading .pillar
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  linksFrom Link[]  @relation("LinksFrom")
  linksTo   Link[]  @relation("LinksTo")
  files     File[]  // <-- uploaded files tied to scheme
}

model LegalDoc {
  id          String   @id @default(cuid())
  title       String
  jurisdiction String
  sector      String?
  locationTag String?
  summary     String?
  url         String?
  tags        String     // required
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Template {
  id          String   @id @default(cuid())
  title       String
  category    String
  contentMd   String
  tags        String     // required
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Link {
  id        String  @id @default(cuid())
  fromId    String
  toId      String
  relation  String

  from Scheme @relation(fields: [fromId], references: [id], name: "LinksFrom")
  to   Scheme @relation(fields: [toId], references: [id], name: "LinksTo")
}

// ---------- File attachments for schemes ----------
enum FileType {
  CIRCULAR
  FAQ
  GUIDELINE
  SUPPORTING
  OTHER
}

enum FileStatus {
  UPLOADED
  PENDING
}

model File {
  id         String     @id @default(cuid())
  schemeId   String?    // nullable so you can also attach files to other things later
  scheme     Scheme?    @relation(fields: [schemeId], references: [id])
  title      String
  type       FileType   @default(SUPPORTING)
  url        String?    // public URL (e.g., Vercel storage/S3/Drive)
  storageKey String?    // provider key if you store the blob
  status     FileStatus @default(UPLOADED)

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

