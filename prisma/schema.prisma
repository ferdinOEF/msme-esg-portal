generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Use the same DB everywhere (set DATABASE_URL in .env & Vercel)
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Scheme {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  name         String   @unique
  shortCode    String?
  type         String            // e.g. "Scheme" | "Certification" | "Framework"
  authority    String            // e.g. "MSME", "MoEFCC", "State"
  description  String
  benefits     String?
  eligibility  String?
  documentsUrl String?
  tags         String            // CSV like "central,scheme,environment"

  // relations
  linksFrom    Link[]   @relation("LinksFrom")
  linksTo      Link[]   @relation("LinksTo")
  files        File[]
}

model LegalDoc {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  title        String   @unique
  jurisdiction String           // e.g. "Central" | "State"
  sector       String?
  locationTag  String?
  summary      String?
  url          String?
  tags         String           // CSV required
}

model Template {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  title        String   @unique
  category     String           // e.g. "Checklist", "Policy", "Form"
  contentMd    String
  downloadUrl  String?
  tags         String           // CSV required
}

model Link {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())

  fromId    String
  toId      String
  relation  String

  from      Scheme  @relation("LinksFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to        Scheme  @relation("LinksTo",   fields: [toId],   references: [id], onDelete: Cascade)

  @@index([fromId])
  @@index([toId])
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schemeId  String?
  name      String
  url       String
  kind      String?   // e.g. "circular", "faq", "supporting-document"

  scheme    Scheme?  @relation(fields: [schemeId], references: [id], onDelete: SetNull)

  @@index([schemeId])
}
